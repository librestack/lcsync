-------------------------------------------------------------------------------
make clangtest / make %clang - vector tests fail
-------------------------------------------------------------------------------
clang -Wall -Wextra -Wpedantic -g -Wno-gnu-zero-variadic-macro-arguments   -c -o net.o net.c
net.c:707:6: warning: variable 'data' is used uninitialized whenever 'if' condition is true [-Wsometimes-uninitialized]
        if (mtree_verify(tree, mtree_treelen(tree))) goto err_2;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
net.c:735:20: note: uninitialized use occurs here
        job_queue_destroy(data->q);
                          ^~~~
net.c:707:2: note: remove the 'if' if its condition is always false
        if (mtree_verify(tree, mtree_treelen(tree))) goto err_2;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
net.c:699:18: note: initialize the variable 'data' to silence this warning
        net_data_t *data;
                        ^
                         = NULL
1 warning generated.

-------------------------------------------------------------------------------
==18660== Conditional jump or move depends on uninitialised value(s)
==18660==    at 0x10DD2D: mld_address_record (mld.c:550)
==18660==    by 0x10DE6F: mld_listen_report (mld.c:579)
==18660==    by 0x10DEBD: mld_msg_handle (mld.c:587)
==18660==    by 0x10E167: mld_listen (mld.c:630)
==18660==    by 0x10E1E0: mld_listen_job (mld.c:640)
==18660==    by 0x10BA89: job_seek (job.c:84)
==18660==    by 0x4A04F5D: start_thread (in /lib64/libpthread-2.32.so)
==18660==    by 0x4B162BE: clone (in /lib64/libc-2.32.so)
This was running the server in MLD mode:
sudo valgrind src/lcsync -v --mld ~/media/dnapizza.jpg 
-------------------------------------------------------------------------------
Sometimes in non-MLD node, network syncing does not work first time. A second
run is required for the checksums to match.
-------------------------------------------------------------------------------
0061 intermittent failure
0:pkts received=0 (joined)
intermittent, but quite frequent (happens more often than not)
also sometimes just blocks and doesnt complete
-------------------------------------------------------------------------------
0060 pkts received=1 (joined) - Address already in use
despite SO_REUSEADDR
intermittent, but quite frequent
-------------------------------------------------------------------------------
0058 intermittently fails to recv msgs - timing?
-------------------------------------------------------------------------------
0000-0062  MLD filter testing - joining via multicast
	mld_filter_grp_cmp() - added (0)
	0: timer set to 0
	mld_filter_grp_cmp() - before part (0)                           FAIL

intermittent, possibly timing - seems to pass when run separately to other
tests.
-------------------------------------------------------------------------------
0027 aborts with Unexpected error 9 on netlink descriptor 0.
Doesn't happen under valgrind.

This message is raised by __netlink_assert_response in glibc:

grep -nr __netlink_assert_response *
ChangeLog.old/ChangeLog.19:6428:        (__netlink_assert_response): Add additional missing newlines.
ChangeLog.old/ChangeLog.19:13925:       (__netlink_assert_response): Likewise.
ChangeLog.old/ChangeLog.19:37814:       (__netlink_assert_response): Remove internal_function.
ChangeLog.old/ChangeLog.19:37816:       (__netlink_assert_response): Likewise.
ChangeLog.old/ChangeLog.18:26872:       (__netlink_assert_response): Declare.
ChangeLog.old/ChangeLog.18:26877:       __netlink_assert_response.
ChangeLog.old/ChangeLog.18:26881:       __netlink_assert_response.
sysdeps/unix/sysv/linux/check_pf.c:171:      __netlink_assert_response (fd, read_len);
sysdeps/unix/sysv/linux/ifaddrs.c:174:      __netlink_assert_response (h->fd, read_len);
sysdeps/unix/sysv/linux/netlink_assert_response.c:42:__netlink_assert_response (int fd, ssize_t result)
sysdeps/unix/sysv/linux/netlink_assert_response.c:105:libc_hidden_def (__netlink_assert_response)
sysdeps/unix/sysv/linux/check_native.c:124:      __netlink_assert_response (fd, read_len);
sysdeps/unix/sysv/linux/Versions:181:    __netlink_assert_response;
sysdeps/unix/sysv/linux/netlinkaccess.h:56:void __netlink_assert_response (int fd, ssize_t result);
sysdeps/unix/sysv/linux/netlinkaccess.h:57:libc_hidden_proto (__netlink_assert_response)

-------------------------------------------------------------------------------
Ubuntu 16.04 LTS - segfault when serving files in --mld mode

works when not in mld mode

bacs@graupius:~/lcsync$ lcsync -v --mld src/lcsync
1551: loglevel=127
1574: blocksize=1024
1582: channels=8
1590: net_send('src/lcsync')
1597: mapping src: src/lcsync
1635: net_send_data()
1665: creating 9 threads
3040: net_send_data(): source tree built
Segmentation fault (core dumped)

-------------------------------------------------------------------------------
test 0027 requires bsd/md5.h, which Ubuntu 20.04 doesn't have, at least not
there.  Remove dependency.  We have libsodiium - use it.
-------------------------------------------------------------------------------
test 0035 (check mode)
net.c:495 (again)
Syscall param sendmsg(msg.msg_iov[1]) points to unaddressable byte(s)
probably caused by a bug in the multi-channel sending code
-------------------------------------------------------------------------------
net_send_block() - works without offset?  Works with ptr increment, but not
offset?  Something fishy here.  Needs better tests - are we checking all bytes
in a multi-packet block?
-------------------------------------------------------------------------------
test 0035 (intermittent):
"Unexpected error 9 on netlink descriptor 0."
possibly in net_recv_tree()
-------------------------------------------------------------------------------
cap tests are executing as root
-------------------------------------------------------------------------------
SIGINT (ctrl-c) when running in net recv mode and recv is block interupts recv()
which generates an error, followed by segfault:
$ lcsync dnapizza.jpg /tmp/dnapizza.jpg
Operation not permitted
Bridge creation failed
ioctl (TUNSETIFF) failed: Operation not permitted
TAP creation failed
^Crecv(): Interrupted system call
Segmentation fault
-------------------------------------------------------------------------------
possibly related to above...
1111011111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
Multicast join failed
1111111111111111111111111111111111111111111111111111111111111111
1000000000000000000000000000000000000000000000000000000000000000
recv(): Bad file descriptor
Multicast leave failed
^C^C^C

lcsync listener not stopping
-------------------------------------------------------------------------------
SIGINT does not stop server from sending when blocked in MLD mode
SIGTERM works
-------------------------------------------------------------------------------
intermittent fail in 0062
mld_filter_grp_cmp() - false (1241374768)
integer overflow not possible, so probably writing where we shouldn't
-------------------------------------------------------------------------------
