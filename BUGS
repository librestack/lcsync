-------------------------------------------------------------------------------
Sometimes in non-MLD node, network syncing does not work first time. A second
run is required for the checksums to match.
-------------------------------------------------------------------------------
0061 intermittent failure
0:pkts received=0 (joined)
intermittent, but quite frequent (happens more often than not)
also sometimes just blocks and doesnt complete
-------------------------------------------------------------------------------
0060 pkts received=1 (joined) - Address already in use
despite SO_REUSEADDR
intermittent, but quite frequent
-------------------------------------------------------------------------------
0058 intermittently fails to recv msgs - timing?
-------------------------------------------------------------------------------
0000-0062  MLD filter testing - joining via multicast
	mld_filter_grp_cmp() - added (0)
	0: timer set to 0
	mld_filter_grp_cmp() - before part (0)                           FAIL

intermittent, possibly timing - seems to pass when run separately to other
tests.
-------------------------------------------------------------------------------
0027 aborts with Unexpected error 9 on netlink descriptor 0.
Doesn't happen under valgrind.
-------------------------------------------------------------------------------
Ubuntu 16.04 LTS - segfault when serving files in --mld mode

works when not in mld mode

bacs@graupius:~/lcsync$ lcsync -v --mld src/lcsync
1551: loglevel=127
1574: blocksize=1024
1582: channels=8
1590: net_send('src/lcsync')
1597: mapping src: src/lcsync
1635: net_send_data()
1665: creating 9 threads
3040: net_send_data(): source tree built
Segmentation fault (core dumped)

-------------------------------------------------------------------------------
test 0027 requires bsd/md5.h, which Ubuntu 20.04 doesn't have, at least not
there.  Remove dependency.  We have libsodiium - use it.
-------------------------------------------------------------------------------
test 0035 (check mode)
net.c:495 (again)
Syscall param sendmsg(msg.msg_iov[1]) points to unaddressable byte(s)
probably caused by a bug in the multi-channel sending code
-------------------------------------------------------------------------------
net_send_block() - works without offset?  Works with ptr increment, but not
offset?  Something fishy here.  Needs better tests - are we checking all bytes
in a multi-packet block?
-------------------------------------------------------------------------------
test 0035 (intermittent):
"Unexpected error 9 on netlink descriptor 0."
possibly in net_recv_tree()
-------------------------------------------------------------------------------
cap tests are executing as root
-------------------------------------------------------------------------------
SIGINT (ctrl-c) when running in net recv mode and recv is block interupts recv()
which generates an error, followed by segfault:
$ lcsync dnapizza.jpg /tmp/dnapizza.jpg
Operation not permitted
Bridge creation failed
ioctl (TUNSETIFF) failed: Operation not permitted
TAP creation failed
^Crecv(): Interrupted system call
Segmentation fault
-------------------------------------------------------------------------------
possibly related to above...
1111011111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111
Multicast join failed
1111111111111111111111111111111111111111111111111111111111111111
1000000000000000000000000000000000000000000000000000000000000000
recv(): Bad file descriptor
Multicast leave failed
^C^C^C

lcsync listener not stopping
-------------------------------------------------------------------------------
SIGINT does not stop server from sending when blocked in MLD mode
SIGTERM works
-------------------------------------------------------------------------------
intermittent fail in 0062
mld_filter_grp_cmp() - false (1241374768)
integer overflow not possible, so probably writing where we shouldn't
-------------------------------------------------------------------------------
